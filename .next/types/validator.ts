// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ..\..\src\app\dashboard\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\dashboard\\page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ..\..\src\app\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ..\..\src\app\post\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\post\\[id]\\page.js")
  handler satisfies AppPageConfig<"/post/[id]">
}

// Validate ..\..\src\app\post\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\post\\page.js")
  handler satisfies AppPageConfig<"/post">
}

// Validate ..\..\src\app\user\[id]\page.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\user\\[id]\\page.js")
  handler satisfies AppPageConfig<"/user/[id]">
}

// Validate ..\..\src\app\api\posts\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\posts\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/posts/[id]">
}

// Validate ..\..\src\app\api\posts\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\posts\\route.js")
  handler satisfies RouteHandlerConfig<"/api/posts">
}

// Validate ..\..\src\app\api\upload\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\upload\\route.js")
  handler satisfies RouteHandlerConfig<"/api/upload">
}

// Validate ..\..\src\app\api\users\[id]\posts\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\users\\[id]\\posts\\route.js")
  handler satisfies RouteHandlerConfig<"/api/users/[id]/posts">
}

// Validate ..\..\src\app\api\users\[id]\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\users\\[id]\\route.js")
  handler satisfies RouteHandlerConfig<"/api/users/[id]">
}

// Validate ..\..\src\app\api\users\route.ts
{
  const handler = {} as typeof import("..\\..\\src\\app\\api\\users\\route.js")
  handler satisfies RouteHandlerConfig<"/api/users">
}





// Validate ..\..\src\app\layout.tsx
{
  const handler = {} as typeof import("..\\..\\src\\app\\layout.js")
  handler satisfies LayoutConfig<"/">
}
