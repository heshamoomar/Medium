{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nlet isConnected = false; // Track connection state\r\n\r\nexport async function connectDB() {\r\n  if (isConnected) {\r\n    console.log(\"⚡ Using existing MongoDB connection\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGODB_URI || \"mongodb://localhost:27017/medium-clone\", {\r\n      dbName: \"medium-clone\",\r\n    });\r\n\r\n    isConnected = conn.connections[0].readyState === 1; // 1 = connected\r\n    console.log(\"✅ MongoDB connected:\", conn.connection.host);\r\n  } catch (error) {\r\n    console.error(\"❌ MongoDB connection error:\", error);\r\n    throw new Error(\"Failed to connect to MongoDB\");\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,IAAI,cAAc,OAAO,yBAAyB;AAE3C,eAAe;IACpB,IAAI,aAAa;QACf,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,oHAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,0CAA0C;YACvG,QAAQ;QACV;QAEA,cAAc,KAAK,WAAW,CAAC,EAAE,CAAC,UAAU,KAAK,GAAG,gBAAgB;QACpE,QAAQ,GAAG,CAAC,wBAAwB,KAAK,UAAU,CAAC,IAAI;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/api/models/Post.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst PostSchema = new mongoose.Schema(\r\n  {\r\n    owner_id: { \r\n      type: mongoose.Schema.Types.ObjectId, \r\n      ref: \"users\", \r\n      required: true \r\n    },\r\n    title: { type: String, required: true, trim: true },\r\n    description: { type: String, trim: true },\r\n    image: { type: String, trim: true },\r\n    content: { type: String, required: true },\r\n    createdAt: { type: Date, default: Date.now },\r\n    updatedAt: { type: Date, default: Date.now }\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Indexes for faster queries\r\nPostSchema.index({ owner_id: 1, createdAt: -1 }); // posts by user, newest first\r\nPostSchema.index({ title: \"text\", description: \"text\", content: \"text\" }); // full-text search\r\n\r\nexport default mongoose.models.Post || mongoose.model(\"Post\", PostSchema);\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,IAAI,oHAAQ,CAAC,MAAM,CACpC;IACE,UAAU;QACR,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,MAAM;IAAK;IAClD,aAAa;QAAE,MAAM;QAAQ,MAAM;IAAK;IACxC,OAAO;QAAE,MAAM;QAAQ,MAAM;IAAK;IAClC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC3C,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C,GACA;IAAE,YAAY;AAAK;AAGrB,6BAA6B;AAC7B,WAAW,KAAK,CAAC;IAAE,UAAU;IAAG,WAAW,CAAC;AAAE,IAAI,8BAA8B;AAChF,WAAW,KAAK,CAAC;IAAE,OAAO;IAAQ,aAAa;IAAQ,SAAS;AAAO,IAAI,mBAAmB;uCAE/E,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/lib/cloudinary.ts"],"sourcesContent":["import { v2 as cloudinary } from \"cloudinary\";\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nexport default cloudinary;\r\nexport { cloudinary };\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,gJAAU,CAAC,MAAM,CAAC;IAChB,YAAY,QAAQ,GAAG,CAAC,qBAAqB;IAC7C,SAAS,QAAQ,GAAG,CAAC,kBAAkB;IACvC,YAAY,QAAQ,GAAG,CAAC,qBAAqB;AAC/C;uCAEe,gJAAU","debugId":null}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/api/posts/route.ts"],"sourcesContent":["import { NextResponse, NextRequest } from \"next/server\";\r\nimport { connectDB } from \"../../lib/mongodb\";\r\nimport Post from \"../models/Post.js\";\r\nimport cloudinary from \"../../lib/cloudinary\";\r\nimport mongoose from \"mongoose\";\r\n\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await connectDB();\r\n\r\n    // Read FormData (file + text fields)\r\n    const formData = await req.formData();\r\n    const file = formData.get(\"file\") as File | null;\r\n\r\n    const title = formData.get(\"title\") as string;\r\n    const description = formData.get(\"description\") as string;\r\n    const content = formData.get(\"content\") as string;\r\n    const owner_id = formData.get(\"owner_id\") as string;\r\n\r\n    if (!title || !content) {\r\n      return NextResponse.json({ error: \"Title and Content are required\" }, { status: 400 });\r\n    }\r\n\r\n    let imageUrl = \"\";\r\n\r\n    // Upload to Cloudinary if file exists\r\n    if (file) {\r\n      const bytes = await file.arrayBuffer();\r\n      const buffer = Buffer.from(bytes);\r\n\r\n      const uploadResponse = await new Promise<any>((resolve, reject) => {\r\n        cloudinary.uploader\r\n          .upload_stream({ folder: \"posts\" }, (error, result) => {\r\n            if (error) reject(error);\r\n            else resolve(result);\r\n          })\r\n          .end(buffer);\r\n      });\r\n\r\n      imageUrl = uploadResponse.secure_url;\r\n    }\r\n\r\n    // Save post in MongoDB\r\n    const newPost = await Post.create({\r\n      owner_id,\r\n      title,\r\n      description,\r\n      content,\r\n      image: imageUrl,\r\n    });\r\n\r\n    const plainPost = JSON.parse(JSON.stringify(newPost));\r\n\r\n    return NextResponse.json(plainPost, { status: 201 });\r\n  } catch (err) {\r\n    console.error(\"❌ Error creating post:\", err);\r\n    return NextResponse.json({ error: \"Failed to create post\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    await connectDB();\r\n\r\n    console.log(\"Fetching all posts: \");\r\n\r\n    const posts = await Post.find().sort({ createdAt: -1 }).lean(); // newest first\r\n\r\n    if (!posts || posts.length === 0) {\r\n      return NextResponse.json(\r\n        { message: \"No posts found.\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(posts, { status: 200 });\r\n\r\n\r\n  } catch (err) {\r\n    console.error(\"❌ Error fetching posts:\", err);\r\n    return NextResponse.json({ error: \"Failed to fetch posts\" }, { status: 500 });\r\n\r\n\r\n  } \r\n}\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;;;;AAIO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,IAAA,2IAAS;QAEf,qCAAqC;QACrC,MAAM,WAAW,MAAM,IAAI,QAAQ;QACnC,MAAM,OAAO,SAAS,GAAG,CAAC;QAE1B,MAAM,QAAQ,SAAS,GAAG,CAAC;QAC3B,MAAM,cAAc,SAAS,GAAG,CAAC;QACjC,MAAM,UAAU,SAAS,GAAG,CAAC;QAC7B,MAAM,WAAW,SAAS,GAAG,CAAC;QAE9B,IAAI,CAAC,SAAS,CAAC,SAAS;YACtB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QAEA,IAAI,WAAW;QAEf,sCAAsC;QACtC,IAAI,MAAM;YACR,MAAM,QAAQ,MAAM,KAAK,WAAW;YACpC,MAAM,SAAS,OAAO,IAAI,CAAC;YAE3B,MAAM,iBAAiB,MAAM,IAAI,QAAa,CAAC,SAAS;gBACtD,4JAAU,CAAC,QAAQ,CAChB,aAAa,CAAC;oBAAE,QAAQ;gBAAQ,GAAG,CAAC,OAAO;oBAC1C,IAAI,OAAO,OAAO;yBACb,QAAQ;gBACf,GACC,GAAG,CAAC;YACT;YAEA,WAAW,eAAe,UAAU;QACtC;QAEA,uBAAuB;QACvB,MAAM,UAAU,MAAM,gJAAI,CAAC,MAAM,CAAC;YAChC;YACA;YACA;YACA;YACA,OAAO;QACT;QAEA,MAAM,YAAY,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;QAE5C,OAAO,gJAAY,CAAC,IAAI,CAAC,WAAW;YAAE,QAAQ;QAAI;IACpD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF;AAEO,eAAe,IAAI,GAAgB;IACxC,IAAI;QACF,MAAM,IAAA,2IAAS;QAEf,QAAQ,GAAG,CAAC;QAEZ,MAAM,QAAQ,MAAM,gJAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GAAG,IAAI,IAAI,eAAe;QAE/E,IAAI,CAAC,SAAS,MAAM,MAAM,KAAK,GAAG;YAChC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAkB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,OAAO;YAAE,QAAQ;QAAI;IAGhD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAG7E;AACF","debugId":null}}]
}