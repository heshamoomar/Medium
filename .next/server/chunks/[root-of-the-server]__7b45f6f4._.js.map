{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nlet isConnected = false; // Track connection state\r\n\r\nexport async function connectDB() {\r\n  if (isConnected) {\r\n    console.log(\"⚡ Using existing MongoDB connection\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGODB_URI || \"mongodb://localhost:27017/medium-clone\", {\r\n      dbName: \"medium-clone\",\r\n    });\r\n\r\n    isConnected = conn.connections[0].readyState === 1; // 1 = connected\r\n    console.log(\"✅ MongoDB connected:\", conn.connection.host);\r\n  } catch (error) {\r\n    console.error(\"❌ MongoDB connection error:\", error);\r\n    throw new Error(\"Failed to connect to MongoDB\");\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,IAAI,cAAc,OAAO,yBAAyB;AAE3C,eAAe;IACpB,IAAI,aAAa;QACf,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,oHAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,0CAA0C;YACvG,QAAQ;QACV;QAEA,cAAc,KAAK,WAAW,CAAC,EAAE,CAAC,UAAU,KAAK,GAAG,gBAAgB;QACpE,QAAQ,GAAG,CAAC,wBAAwB,KAAK,UAAU,CAAC,IAAI;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/api/models/Post.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst PostSchema = new mongoose.Schema(\r\n  {\r\n    owner_id: { \r\n      type: mongoose.Schema.Types.ObjectId, \r\n      ref: \"users\", \r\n      required: true \r\n    },\r\n    title: { type: String, required: true, trim: true },\r\n    description: { type: String, trim: true },\r\n    image: { type: String, trim: true },\r\n    content: { type: String, required: true },\r\n    createdAt: { type: Date, default: Date.now },\r\n    updatedAt: { type: Date, default: Date.now }\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Indexes for faster queries\r\nPostSchema.index({ owner_id: 1, createdAt: -1 }); // posts by user, newest first\r\nPostSchema.index({ title: \"text\", description: \"text\", content: \"text\" }); // full-text search\r\n\r\nexport default mongoose.models.Post || mongoose.model(\"Post\", PostSchema);\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,IAAI,oHAAQ,CAAC,MAAM,CACpC;IACE,UAAU;QACR,MAAM,oHAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,MAAM;IAAK;IAClD,aAAa;QAAE,MAAM;QAAQ,MAAM;IAAK;IACxC,OAAO;QAAE,MAAM;QAAQ,MAAM;IAAK;IAClC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;IAC3C,WAAW;QAAE,MAAM;QAAM,SAAS,KAAK,GAAG;IAAC;AAC7C,GACA;IAAE,YAAY;AAAK;AAGrB,6BAA6B;AAC7B,WAAW,KAAK,CAAC;IAAE,UAAU;IAAG,WAAW,CAAC;AAAE,IAAI,8BAA8B;AAChF,WAAW,KAAK,CAAC;IAAE,OAAO;IAAQ,aAAa;IAAQ,SAAS;AAAO,IAAI,mBAAmB;uCAE/E,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/api/users/%5Bid%5D/posts/route.ts"],"sourcesContent":["// medium/src/app/api/users/[id]/posts/route.ts\r\n// get all posts by a specific user\r\n// GET /api/users/:id/posts\r\n// returns array of posts by that user\r\n// each post includes id, title, content, createdAt, updatedAt, imageUrl, etc.\r\n// no authentication needed to view posts\r\n// anyone can view posts by any user\r\n// used by /post/[id]/page.tsx to show post owner info\r\n\r\n\"use server\";\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { connectDB } from \"../../../../lib/mongodb\"; \r\nimport Post from \"../../../models/Post\"; \r\nimport mongoose from \"mongoose\";\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  try {\r\n    await connectDB();\r\n\r\n    const { id } = await params; // userId\r\n    console.log(\"Fetching posts for user:\", id);\r\n\r\n    if (!mongoose.Types.ObjectId.isValid(id)) {\r\n      return NextResponse.json({ error: \"Invalid user ID\" }, { status: 400 });\r\n    }\r\n\r\n    // Find all posts by userId, newest first\r\n    const posts = await Post.find({ owner_id: id })\r\n      .sort({ createdAt: -1 })\r\n      .lean();\r\n\r\n    if (!posts || posts.length === 0) {\r\n      return NextResponse.json(\r\n        { message: \"No posts found for this user\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(posts, { status: 200 });\r\n  } catch (err) {\r\n    console.error(\"❌ Error fetching user posts:\", err);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch posts\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,mCAAmC;AACnC,2BAA2B;AAC3B,sCAAsC;AACtC,8EAA8E;AAC9E,yCAAyC;AACzC,oCAAoC;AACpC,sDAAsD;;;;;;AAGtD;AACA;AACA;AACA;;;;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,MAAM,IAAA,2IAAS;QAEf,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,QAAQ,SAAS;QACtC,QAAQ,GAAG,CAAC,4BAA4B;QAExC,IAAI,CAAC,oHAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK;YACxC,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,yCAAyC;QACzC,MAAM,QAAQ,MAAM,gJAAI,CAAC,IAAI,CAAC;YAAE,UAAU;QAAG,GAC1C,IAAI,CAAC;YAAE,WAAW,CAAC;QAAE,GACrB,IAAI;QAEP,IAAI,CAAC,SAAS,MAAM,MAAM,KAAK,GAAG;YAChC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA+B,GAC1C;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC,OAAO;YAAE,QAAQ;QAAI;IAChD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;;;IAlCsB;;AAAA,iPAAA","debugId":null}}]
}