{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/api/models/User.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  auth_id: { type: String, required: true, unique: true },\r\n  email: { type: String, required: true },\r\n  family_name: String,\r\n  given_name: String,\r\n  picture: { type: String, trim: true },\r\n  lastLogin: { type: Date }\r\n});\r\n\r\nUserSchema.index({ name: 1 }); // For searching by name\r\n\r\nexport default mongoose.models.User || mongoose.model(\"User\", UserSchema);"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,aAAa,IAAI,oHAAQ,CAAC,MAAM,CAAC;IACrC,SAAS;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACtD,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,aAAa;IACb,YAAY;IACZ,SAAS;QAAE,MAAM;QAAQ,MAAM;IAAK;IACpC,WAAW;QAAE,MAAM;IAAK;AAC1B;AAEA,WAAW,KAAK,CAAC;IAAE,MAAM;AAAE,IAAI,wBAAwB;uCAExC,oHAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,oHAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nlet isConnected = false; // Track connection state\r\n\r\nexport async function connectDB() {\r\n  if (isConnected) {\r\n    console.log(\"⚡ Using existing MongoDB connection\");\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const conn = await mongoose.connect(process.env.MONGODB_URI || \"mongodb://localhost:27017/medium-clone\", {\r\n      dbName: \"medium-clone\",\r\n    });\r\n\r\n    isConnected = conn.connections[0].readyState === 1; // 1 = connected\r\n    console.log(\"✅ MongoDB connected:\", conn.connection.host);\r\n  } catch (error) {\r\n    console.error(\"❌ MongoDB connection error:\", error);\r\n    throw new Error(\"Failed to connect to MongoDB\");\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,IAAI,cAAc,OAAO,yBAAyB;AAE3C,eAAe;IACpB,IAAI,aAAa;QACf,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,oHAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,0CAA0C;YACvG,QAAQ;QACV;QAEA,cAAc,KAAK,WAAW,CAAC,EAAE,CAAC,UAAU,KAAK,GAAG,gBAAgB;QACpE,QAAQ,GAAG,CAAC,wBAAwB,KAAK,UAAU,CAAC,IAAI;IAC1D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/lib/syncUser.ts"],"sourcesContent":["//  syncUser.ts\r\n// Syncs the authenticated Kinde user with our MongoDB database.\r\n// \r\n// If the user does not exist in our DB, creates a new user record.\r\n// If the user exists, updates their info (e.g., last login time).  \r\n// Returns the user document from our DB.\r\n// Uses Kinde's server-side session to get the authenticated user info.\r\n\r\n\r\nimport User from \"../api/models/User\";\r\nimport { getKindeServerSession } from \"@kinde-oss/kinde-auth-nextjs/server\";\r\nimport { connectDB } from \"../lib/mongodb\";\r\n\r\nexport async function syncUser() {\r\n  await connectDB();\r\n\r\n  const { getUser } = getKindeServerSession();\r\n  const kindeUser = await getUser();\r\n  if (!kindeUser) return null;\r\n\r\n  const {\r\n    id: auth_id,\r\n    email,\r\n    family_name,\r\n    given_name,\r\n    picture,\r\n  } = kindeUser;\r\n\r\n  const user = await User.findOneAndUpdate(\r\n    { auth_id }, // match by Kinde's ID\r\n    {\r\n      auth_id,\r\n      email,\r\n      family_name,\r\n      given_name,\r\n      picture,\r\n      lastLogin: new Date(),\r\n    },\r\n    { upsert: true, new: true, setDefaultsOnInsert: true }\r\n  );\r\n\r\n  return user;\r\n}\r\n"],"names":[],"mappings":"AAAA,eAAe;AACf,gEAAgE;AAChE,GAAG;AACH,mEAAmE;AACnE,oEAAoE;AACpE,yCAAyC;AACzC,uEAAuE;;;;;AAGvE;AACA;AAAA;AACA;;;;AAEO,eAAe;IACpB,MAAM,IAAA,yIAAS;IAEf,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,+QAAqB;IACzC,MAAM,YAAY,MAAM;IACxB,IAAI,CAAC,WAAW,OAAO;IAEvB,MAAM,EACJ,IAAI,OAAO,EACX,KAAK,EACL,WAAW,EACX,UAAU,EACV,OAAO,EACR,GAAG;IAEJ,MAAM,OAAO,MAAM,8IAAI,CAAC,gBAAgB,CACtC;QAAE;IAAQ,GACV;QACE;QACA;QACA;QACA;QACA;QACA,WAAW,IAAI;IACjB,GACA;QAAE,QAAQ;QAAM,KAAK;QAAM,qBAAqB;IAAK;IAGvD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/post/PostClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/post/PostClient.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/post/PostClient.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/post/PostClient.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/post/PostClient.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/post/PostClient.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///D:/CS/Medium/medium/src/app/post/page.tsx"],"sourcesContent":["\r\nimport { syncUser } from \"../lib/syncUser\";\r\nimport { redirect } from \"next/navigation\"; \r\nimport PostClient from \"./PostClient\";\r\n\r\nexport default async function PostPage() {\r\n  const user = await syncUser();\r\n\r\n  if (!user) {\r\n    redirect(\"/\"); // not logged in\r\n  }\r\n\r\n\r\nconst plainUser = JSON.parse(JSON.stringify(user)); // to remove Mongoose document methods\r\n// needed because PostClient is a Client Component and cannot receive Mongoose document directly\r\n// (could also use user.toObject() if it were available)\r\n\r\n  return <PostClient user={plainUser} />;\r\n}\r\n"],"names":[],"mappings":";;;;;AACA;AACA;AAAA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,OAAO,MAAM,IAAA,yIAAQ;IAE3B,IAAI,CAAC,MAAM;QACT,IAAA,iMAAQ,EAAC,MAAM,gBAAgB;IACjC;IAGF,MAAM,YAAY,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,QAAQ,sCAAsC;IAC1F,gGAAgG;IAChG,wDAAwD;IAEtD,qBAAO,8OAAC,4IAAU;QAAC,MAAM;;;;;;AAC3B","debugId":null}}]
}